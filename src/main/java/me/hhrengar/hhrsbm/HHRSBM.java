package me.hhrengar.hhrsbm;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import me.hhrengar.hhrsbm.event.HttpGetJSON;
import me.hhrengar.hhrsbm.event.ScoreboardGetter;
import me.hhrengar.hhrsbm.event.ChatMessageGetter;
import me.hhrengar.hhrsbm.gui.ConfigGUI;
import me.nullicorn.nedit.NBTReader;
import me.nullicorn.nedit.NBTWriter;
import me.nullicorn.nedit.exception.NBTParseException;
import me.nullicorn.nedit.type.NBTCompound;
import me.nullicorn.nedit.type.NBTList;
import net.fabricmc.api.ModInitializer;
import net.minecraft.nbt.NbtDouble;
import net.querz.nbt.io.NBTOutputStream;
import net.querz.nbt.tag.Tag;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.jetbrains.annotations.NotNull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.*;
import java.net.URL;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


public class HHRSBM implements ModInitializer {
	public static final String MOD_ID = "hhrsbm";
	public static final Logger LOGGER = LoggerFactory.getLogger(MOD_ID);

	@Override
	public void onInitialize() {
		LOGGER.info("Hello Fabric world!");
		ChatMessageGetter.registerMessageGetter();
		ScoreboardGetter.registerScoreboardGetter();
		ConfigHandler.loadConfig();
		AliasHandler.loadAliases();
		ConfigGUI.guiChecker();
		CloseableHttpClient httpClient = HttpClientBuilder.create().build();
		HttpGetJSON.getSomeoneInv_Contents("28667672039044989b0019b14a2c34d6");
		try {
			NBTList items = NBTReader.read(new ByteArrayInputStream(Base64.getDecoder().decode(
					""
			))).getList("i");
			LOGGER.info("Ree: " +items.getCompound(1).toString());
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
	}
}
